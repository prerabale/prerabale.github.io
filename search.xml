<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Node.js 源码调试</title>
      <link href="/2019/04/19/node-js-yuan-ma-diao-shi/"/>
      <url>/2019/04/19/node-js-yuan-ma-diao-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>任何信息的价值都有时效性和适用性，本文写时 <a href="https://nodejs.org">Node.js</a> 的最新发行版是 <code>v11.14.0</code>，稳定版本是 <code>v10.15.3</code>，文中出现的源码均来自 <code>tag</code>: <code>v11.14.0</code>。使用的电脑环境是：macOs 10.14.2。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Node.js is a JavaScript runtime built on Chrome’s V8 JavaScript engine. </p></blockquote><p><a href="https://nodejs.org">Node.js</a> 是基于 <a href="https://github.com/v8/v8">V8</a> 和 <a href="https://github.com/libuv/libuv">libuv</a> 进行构建的，底层是以 <code>C/C++</code> 实现，而标准库部分则是采用 <code>JS</code> 编写。所以 Node.js 的源码调试分为两部分，<code>C/C++</code> 代码调试和 <code>JS</code> 代码调试。<a href="https://yjhjstz.gitbooks.io/deep-into-node/chapter1/chapter1-0.html">更多…</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>Node.js <a href="https://github.com/nodejs/node">源码</a>一份</li><li><a href="https://code.visualstudio.com/">Visual Studio Code</a> 或其它调试 <code>C/C++</code>、<code>JS</code> 的 <code>调试器/IDE</code>。</li></ol><h2 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h2><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>发行版本的 <code>Node</code> 是不支持调试的，所以我们需要自己通过源码构建一份可调试的 <code>Node</code>，<code>Node</code> 项目构建通过 <code>make</code> 进行管理，开发者们贴心的准备好了 <code>configure</code> 文件，所以构建一个自己定制版的 <code>Node</code> 非常方便。</p><blockquote><p><a href="https://github.com/nodejs/node/blob/master/BUILDING.md">官方构建指南</a></p></blockquote><h4 id="第一步：入口文件添加-debugger"><a href="#第一步：入口文件添加-debugger" class="headerlink" title="第一步：入口文件添加 debugger"></a>第一步：入口文件添加 debugger</h4><p>首先，进入到下载下来的 Node.js 源码仓库目录（之后的操作都在这个目录进行）。  </p><p>修改 <code>JS</code> 源码入口文件(<code>./lib/internal/bootstrap/node.js</code>)文件中的内容，在头部加入 <code>debugger</code>。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">debugger</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;&lt;--- 在这里加入 debugger;</span><span class="token comment" spellcheck="true">// This file is compiled as if it's wrapped in a function with arguments</span><span class="token comment" spellcheck="true">// passed by node::RunBootstrapping()</span><span class="token comment" spellcheck="true">/* global process, require, internalBinding, isMainThread, ownsProcessState */</span><span class="token comment" spellcheck="true">/* global primordials */</span><span class="token keyword">const</span> <span class="token punctuation">{</span> Object<span class="token punctuation">,</span> Symbol <span class="token punctuation">}</span> <span class="token operator">=</span> primordials<span class="token punctuation">;</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">internalBinding</span><span class="token punctuation">(</span><span class="token string">'config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> deprecate <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'internal/util'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setupProcessObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setupGlobalProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setupBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第二步：执行编译"><a href="#第二步：执行编译" class="headerlink" title="第二步：执行编译"></a>第二步：执行编译</h4><p>Node.js 使用 make 管理项目，开发者们准备了 configure 文件，我们只需要执行 <code>./configure</code> 就可生成当前环境可用的编译默认配置，然后执行 make 进行编译。但是默认的编译配置是没有启用调试模式的，因此，我们需要在执行 <code>./configure</code> 时加上 <code>--debug</code> 就可以生成可调试的编译配置项，然后再进行编译。</p><p>完整的命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>./configure --debug<span class="token function">make</span> -C out  BUILDTYPE<span class="token operator">=</span>Debug -j4<span class="token keyword">echo</span> <span class="token string">"showtime 🎉"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为此后我们每次修改文件都需要重新编译，所以我这里把这些命令写到了 <code>build.sh</code> 里，之后的修改需要重新编译时，执行一次这个文件就可以了。</p><p>执行这个文件之前，需要先给这个文件一个可执行的权限：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> +x build.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完事具备，只需要在命令行输入 <code>./build.sh</code> 就可以开始编译了，然后你就可以去冲杯☕️了（coffee or tea? tea, pls）。<br>编译之后的文件你可以在 <code>./out/Debug/</code> 目录下找到，里面的 <code>Node</code> 文件就是我们所需要的了。</p><h3 id="调试-JS-源码"><a href="#调试-JS-源码" class="headerlink" title="调试 JS 源码"></a>调试 JS 源码</h3><h4 id="第一步：准备一份测试文件"><a href="#第一步：准备一份测试文件" class="headerlink" title="第一步：准备一份测试文件"></a>第一步：准备一份测试文件</h4><p>创建一个用于调试的项目/文件，里面随便写上一些什么，当然，你也可以用现成已经有的项目/文件。<br>为了方便，我就在 <code>Node.js</code> 的源码仓库目录下面创建了一个文件:</p><pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="第二步：启动服务"><a href="#第二步：启动服务" class="headerlink" title="第二步：启动服务"></a>第二步：启动服务</h4><p>现在让我们用编译出来的 <code>Node</code> 执行这个文件：</p><pre class="line-numbers language-bash"><code class="language-bash">./out/Debug/Node --inspect-brk<span class="token operator">=</span>9229 test.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到如下提示就说明你的服务已经启用并处于可调试状态：</p><pre class="line-numbers language-bash"><code class="language-bash">Debugger listening on ws://127.0.0.1:9229/0aeaa4ec-113b-4e08-94d9-0477c61d59acFor help, see: https://nodejs.org/en/docs/inspector<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="第三步：调试"><a href="#第三步：调试" class="headerlink" title="第三步：调试"></a>第三步：调试</h4><p>接下来我们完成另外一半，用安装好的 <code>Visual Studio Code</code> 打开你的项目</p><p>点击左侧的蜘蛛标志，进入调试配置界面，然后点击右上角的配置按钮(打开目录下的 <code>.vscode/launch.json</code>)</p><blockquote><p>注意：Visual Studio Code 需要打开一个项目时才能够创建配置文件</p></blockquote><p><img src="/images/vscode-debug-setting.png" alt=""></p><p>在配置文件中填入如下内容：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    // 使用 IntelliSense 了解相关属性。     // 悬停以查看现有属性的描述。    // 欲了解更多信息，请访问<span class="token operator">:</span> https<span class="token operator">:</span>//go.microsoft.com/fwlink/?linkid=<span class="token number">830387</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"attach"</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Attact Program"</span><span class="token punctuation">,</span>            <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">9229</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切记，记得进行保存。回到设置界面选择刚刚配置的 “Attact Program”，然后点击绿色的三角标开始，然后你就可以进入到 <code>Node.js</code> 源码中 <code>JS</code> 部分的调试了。</p><p>之后每次改动你的代码的时候都记得执行以下 <code>build.sh</code> 重新执行编译。</p><blockquote><p>关于 vscode 中 JS 的更多调试姿势请看<a href="https://code.visualstudio.com/docs/editor/debugging">这里</a></p></blockquote><h3 id="调试-C-C-源码"><a href="#调试-C-C-源码" class="headerlink" title="调试 C/C++ 源码"></a>调试 C/C++ 源码</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p><a href="https://code.visualstudio.com/">Visual Studio Code</a> 默认是不支持 <code>C/C++</code> 调试的，需要安装对应的插件，打开 <a href="https://code.visualstudio.com/">Visual Studio Code</a> 的插件商店，<br>搜索 <code>c++</code>，安装名为 <code>C/C++</code> 的官方插件</p><p><img src="/images/vscode-c-plugin.jpg" alt=""></p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>同 JS 部分一样，打开安装好的 <code>Visual Studio Code</code> 打开你的项目</p><p>点击左侧的蜘蛛标志，进入调试配置界面，然后点击右上角的配置按钮(打开目录下的 <code>.vscode/launch.json</code>)</p><blockquote><p>注意：Visual Studio Code 需要打开一个目录才能够创建配置文件</p></blockquote><p><img src="/images/vscode-debug-setting.png" alt=""></p><p>在配置文件中填入如下内容：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    // Use IntelliSense to learn about possible attributes.    // Hover to view descriptions of existing attributes.    // For more information<span class="token punctuation">,</span> visit<span class="token operator">:</span> https<span class="token operator">:</span>//go.microsoft.com/fwlink/?linkid=<span class="token number">830387</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"(lldb) Launch"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}/out/Debug/Node"</span><span class="token punctuation">,</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}"</span><span class="token punctuation">,</span>            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"lldb"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切记，记得进行保存。</p><p>然后用 IDE 在 <code>C/C++</code> 入口文件处 <code>./src/node_mian.cc</code> 打上 debugger 标识。<br>回到设置界面选择刚刚配置的 “Attact Program”，然后点击绿色的三角标开始，然后你就可以进入到 <code>Node.js</code> 源码中 <code>C/C++</code> 部分的调试了。</p><p><img src="/images/vscode-c-debug.jpg" alt=""></p><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>如果你在使用的环境是 MacOs 的 Catalina 版本，你可能会遇到 C++ 部分调试的时候 <code>stopAtEntry</code> 没有生效的问题，那么你需要看一下这个官方的 issue</p><p><a href="https://github.com/microsoft/vscode-cpptools/issues/3829">Can’t debug on macOS Catalina (LLDB)</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/nodejs/node/blob/master/BUILDING.md">Building Node.js</a></li><li><a href="https://juejin.im/post/5a5cc0f4518825734216e166">Node.js源码学习(1) 使用cLion调试node.js源码</a></li><li><a href="https://github.com/xtx1130/blog/issues/9">node源码粗读（2）：node编译过程详解及如何在本地进行源码修改和调试</a></li><li><a href="https://github.com/xtx1130/blog/issues/14">node源码粗读（5）：通过调试./lib库的js代码来看javascript在node中运行环境的变化</a></li><li><a href="https://yjhjstz.gitbooks.io/deep-into-node/chapter1/chapter1-0.html">深入理解Node.js：核心思想与源码分析</a></li><li><a href="https://zhuanlan.zhihu.com/p/36654741">使用 Visual Studio Code 搭建 C/C++ 开发和调试环境</a></li><li><a href="https://code.visualstudio.com/docs/languages/cpp">C++ programming with Visual Studio Code</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
